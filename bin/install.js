#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const CLAUDE_DIR = '.claude';
const COMMANDS_DIR = path.join(CLAUDE_DIR, 'commands');
const DOCS_DIR = 'docs';
const SLICING_DOCS_DIR = path.join(DOCS_DIR, 'slicing-analysis');

// Colors for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function main() {
  const args = process.argv.slice(2);

  // If called during npm install, just exit
  if (args.includes('--check')) {
    return;
  }

  log('\nüîß Increments Slicer Installation\n', 'bright');

  // Check if we're in a reasonable project directory
  const hasPackageJson = fs.existsSync('package.json');
  const hasGit = fs.existsSync('.git');

  if (!hasPackageJson && !hasGit) {
    log('‚ö†Ô∏è  Warning: Not in a project directory (no package.json or .git found)', 'yellow');
    log('   Continue anyway? This will create .claude/ directory here.\n', 'yellow');
    // In a real implementation, you'd add interactive prompt here
    // For now, we'll continue
  }

  // Get package installation path
  const packageRoot = path.resolve(__dirname, '..');
  log(`üì¶ Package location: ${packageRoot}`, 'blue');

  // 1. Create .claude/commands directory
  if (!fs.existsSync(COMMANDS_DIR)) {
    fs.mkdirSync(COMMANDS_DIR, { recursive: true });
    log('‚úÖ Created .claude/commands directory', 'green');
  } else {
    log('‚úì  .claude/commands already exists', 'blue');
  }

  // 2. Install slice command
  const sliceSource = path.join(packageRoot, 'commands', 'slice.md');
  const sliceTarget = path.join(COMMANDS_DIR, 'slice.md');

  if (fs.existsSync(sliceTarget)) {
    log('‚è≠Ô∏è  /slice command already exists (skipping)', 'yellow');
  } else {
    try {
      // Try to create symlink first (better for development)
      try {
        fs.symlinkSync(sliceSource, sliceTarget);
        log('‚úÖ Installed /slice command (symlink)', 'green');
      } catch (symlinkErr) {
        // Fallback: copy file if symlink fails (Windows compatibility)
        fs.copyFileSync(sliceSource, sliceTarget);
        log('‚úÖ Installed /slice command (copy)', 'green');
      }
    } catch (err) {
      log(`‚ùå Failed to install /slice command: ${err.message}`, 'red');
    }
  }

  // 3. Create docs directory structure
  if (!fs.existsSync(SLICING_DOCS_DIR)) {
    fs.mkdirSync(SLICING_DOCS_DIR, { recursive: true });
    log('‚úÖ Created docs/slicing-analysis directory', 'green');
  } else {
    log('‚úì  docs/slicing-analysis already exists', 'blue');
  }

  // 4. Update .gitignore if it exists
  const gitignorePath = '.gitignore';
  if (fs.existsSync(gitignorePath)) {
    const gitignore = fs.readFileSync(gitignorePath, 'utf8');
    const entriesToAdd = [
      '\n# Increments Slicer',
      'docs/slicing-analysis/'
    ];

    let needsUpdate = false;
    entriesToAdd.forEach(entry => {
      if (!gitignore.includes(entry.trim())) {
        fs.appendFileSync(gitignorePath, entry + '\n');
        needsUpdate = true;
      }
    });

    if (needsUpdate) {
      log('‚úÖ Updated .gitignore', 'green');
    } else {
      log('‚úì  .gitignore already configured', 'blue');
    }
  } else {
    // Create .gitignore if it doesn't exist
    fs.writeFileSync(gitignorePath, '# Increments Slicer\ndocs/slicing-analysis/\n');
    log('‚úÖ Created .gitignore', 'green');
  }

  // 5. Create a README in slicing-analysis if it doesn't exist
  const readmePath = path.join(SLICING_DOCS_DIR, 'README.md');
  if (!fs.existsSync(readmePath)) {
    const readmeContent = `# Slicing Analysis Documents

This directory contains vertical slicing analysis documents generated by Increments Slicer.

## Usage

Run \`/slice\` command in Claude Code to generate analysis:

\`\`\`
/slice Feature: Your feature description
\`\`\`

or

\`\`\`
/slice Project: Your project description
\`\`\`

## Output

Each analysis generates a markdown document with:
- Complete feature/project breakdown
- Walking Skeleton suggestion
- Multiple implementation paths
- Decision guide
- Selection matrix

## Git

These analysis documents are in \`.gitignore\` by default.
If you want to commit them, remove the entry from \`.gitignore\`.
`;
    fs.writeFileSync(readmePath, readmeContent);
    log('‚úÖ Created docs/slicing-analysis/README.md', 'green');
  }

  // Success summary
  log('\n‚ú® Installation complete!\n', 'bright');
  log('Available commands:', 'bright');
  log('  /slice         - Intelligent vertical slicing (auto-detects scope)\n', 'green');

  log('Try it:', 'bright');
  log('  /slice Feature: User authentication', 'blue');
  log('  /slice Project: Task management with projects and tasks\n', 'blue');

  log('Output location:', 'bright');
  log('  ./docs/slicing-analysis/\n', 'blue');

  log('Need help? Check:', 'bright');
  log('  https://github.com/abrahamvallez/increments-slicer\n', 'blue');
}

// Run if called directly
if (require.main === module) {
  try {
    main();
  } catch (err) {
    log(`\n‚ùå Installation failed: ${err.message}`, 'red');
    log(`\nPlease report this issue at: https://github.com/abrahamvallez/increments-slicer/issues\n`, 'yellow');
    process.exit(1);
  }
}

module.exports = { main };
